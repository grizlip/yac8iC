#ifndef CHIP_VM_H
#define CHIP_VM_H
#include <stdint.h>
#include <stdbool.h>

static uint8_t font[80] = 
        {
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
            0xF0, 0x80, 0xF0, 0x80, 0x80  // F
        };

typedef struct chip_vm_state {
   uint8_t memory[4096];
   uint8_t registers[16];
   uint8_t dt;
   uint8_t st;
   int8_t stack_pointer;
   uint16_t i_register;
   uint16_t stack[16];
   uint16_t program_counter;
   uint16_t pressed_keys;
   bool vm_surface[64][32];
} chip_vm_state;

chip_vm_state* vm_create_state(uint8_t* memory,size_t size);
void vm_destroy_state(chip_vm_state* state);
bool vm_execute(chip_vm_state* state, uint8_t cycles_per_frame);
void vm_tick(chip_vm_state* state);
#endif /* CHIP_VM_H */
